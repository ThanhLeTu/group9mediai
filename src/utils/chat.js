const axios = require('axios');
const dotenv = require('dotenv');
dotenv.config();

const API_KEY = process.env.GEMINI_API_KEY;
const MODEL = 'models/gemini-1.5-flash';
const API_URL = `https://generativelanguage.googleapis.com/v1/${MODEL}:generateContent`;

async function chatWithGemini(prompt) {
  const SYSTEM_PROMPT = `
B·∫°n l√† MediBot, tr·ª£ l√Ω AI h·ªó tr·ª£ ng∆∞·ªùi d√πng ƒë·∫∑t l·ªãch kh√°m b·ªánh t·∫°i c√°c b·ªánh vi·ªán.
- H√£y ph·∫£n h·ªìi th√¢n thi·ªán, r√µ r√†ng.
- G·ª£i √Ω chuy√™n khoa ph√π h·ª£p, g·ª£i √Ω b·ªánh vi·ªán, b√°c sƒ© n·∫øu c√≥.
- N·∫øu ng∆∞·ªùi d√πng n√≥i v·ªÅ ch·ªß ƒë·ªÅ kh√°c, c√≥ th·ªÉ tr·∫£ l·ªùi nh·∫π nh√†ng nh∆∞ng quay v·ªÅ ch·ªß ƒë·ªÅ ƒë·∫∑t l·ªãch kh√°m b·ªánh.
`;

  const fullPrompt = `${SYSTEM_PROMPT}\n\nNg∆∞·ªùi d√πng n√≥i: ${prompt}`;

  try {
    const res = await axios.post(`${API_URL}?key=${API_KEY}`, {
      contents: [
        {
          role: "user",
          parts: [{ text: fullPrompt }]
        }
      ]
    });

    const reply = res.data?.candidates?.[0]?.content?.parts?.[0]?.text;
    return reply || "ü§ñ Xin l·ªói, t√¥i ch∆∞a r√µ √Ω b·∫°n.";
  } catch (err) {
    console.error("‚ùå Gemini error:", err.response?.data || err.message);
    return `‚ùå L·ªói AI: ${err.response?.data?.error?.message || err.message}`;
  }
}

module.exports = { chatWithGemini };
